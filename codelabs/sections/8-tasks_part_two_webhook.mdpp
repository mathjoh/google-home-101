## Tasks: Webhooks

### Webhook intent fulfillment

In this part you will need to adapt the intents created in the first tasks to be answered by a webhook instead of Dialogflow.

#### Task 5

Enable webhook fulfillment for the intent created in task 1.

Extend the provided backend `tasks/index.js` to respond to the intent with the same responses as Dialogflow. In addition add fallback handling if unknown intents are routed to the webhook.

Test your webhook using either the testing tool in Dialogflow or Actions on Google.

Hint: You will have to enable webhook fulfillment in your intent. It might be a good idea to remove some of your responses to make sure your get your responses from the application and not one of the predefined responses.  

#### Task 6

Convert the intent from task 2 to be answered by your webhook. This time the answer should reflect the actual inventory of the Ice Cream store. We have provided you with a small service with in-memory inventory handling which should contain all the necessary business logic in the file `tasks/store.js`.

Have the answer to the prompt include both which flavours are in stock and which are out of stock. The number of cones remaining of each does not need to be included.

Test your webhook using either the testing tool in Dialogflow or Actions by Google.

#### Task 7

Convert the intent from task 4 to be answered by your webhook. This time the answer should reflect the actual inventory of the Ice Cream store. 

If there is not enough cones of the requested flavour left the response should reflect that. If there are enough cones left the inventory numbers should be updated.

Test your webhook using either the testing tool in Dialogflow or Actions by Google.

#### Task 8

#####a)

In this task you need to update the intent fulfillment from the previous task. 

As specified in task four, location is an optional parameter. But in order to fulfill and order, our drones need to know where to deliver the ice cream cones. To get this knowledge you will ask the user for permission to get the location of the device used to communicate the order.

If requests contain location we can use the same logic as in the previous task. Otherwise, request the permission to get device location from the user.

Create a new intent named _finsh_order_drones_cream_ handling the users response to the permission request submitted by the user. This request must handle both getting the permission as well as being denied the permission.

Hint: Permission intents are triggered by event, not dialogue, and does not need any training phrases.

#####b)

Now that we can get the location of the device our service is ready to start serving the community. Unfortunately it will keep asking for permission to get device location from users who have already consented.

Update your service to check if the user already have consented before asking for the location again.

